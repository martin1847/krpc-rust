
// This file is @ generated by prost-build.

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InputProto {
    /// int32 e = 1; // default from SerialEnum.JSON = 0 , not allow modify
    #[prost(string, tag = "2")]
    pub json: ::prost::alloc::string::String,
}

/// same with the server side
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OutputProto {
    /// google.rpc.Code  see <https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto>
    #[prost(int32, tag = "1")]
    pub code: i32,
    /// like union Data in C++
    #[prost(oneof = "Out", tags = "2, 3, 4")]
    pub out: ::core::option::Option<Out>,
}
// pub mod output_proto {

   
/// Nested message and enum types in `OutputProto`.
    /// like union Data in C++
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
pub enum Out {
    /// detail  message if there is a error ,otherwise  null
    #[prost(string, tag = "2")]
    Error(::prost::alloc::string::String),
    /// //for json utf8 string, txt like serial
    #[prost(string, tag = "3")]
    Json(::prost::alloc::string::String),
    /// ByteString, others Serialization transfer by protobuf
    #[prost(bytes, tag = "4")]
    Bytes(::prost::alloc::vec::Vec<u8>),
}
